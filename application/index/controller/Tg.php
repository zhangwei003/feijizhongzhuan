<?php/** *  +---------------------------------------------------------------------- *  | 狂神系统系统 [ WE CAN DO IT JUST THINK ] *  +---------------------------------------------------------------------- *  | Copyright (c) 2018 http://www.iredcap.cn All rights reserved. *  +---------------------------------------------------------------------- *  | Licensed ( https://www.apache.org/licenses/LICENSE-2.0 ) *  +---------------------------------------------------------------------- *  | Author: Brian Waring <BrianWaring98@gmail.com> *  +---------------------------------------------------------------------- */namespace app\index\controller;use app\common\controller\Common;use app\common\logic\Log;use app\common\logic\TgLogic;use think\Cache;use think\Request;use think\Route;class Tg extends Common{    protected $tgLogic;    public function __construct(Request $request = null, TgLogic $tgLogic)    {        parent::__construct($request);        $this->tgLogic = $tgLogic;    }    /**     * 设置tg消息回调通知地址     */    public function setNotifyUrl(Request $request)    {        $webHook = $request->domain() . '/index/tg/notify';        $ret = $this->tgLogic->setWebHook($webHook);        var_dump($ret);    }    /**     * @return bool     */    public function notify(Request $request)    {        $json = file_get_contents("php://input");        \think\Log::notice("TG机器人回调参数：" . $json);        $data = json_decode($json, true);        //有可能是发送消息 有可能是编辑消息        $pushMsg = isset($data['message']) ? $data['message'] : $data['edited_message'];        //parse各种事件  消息事件&行为事件        //1.简单文本事件        try {            //发送图片事件           /* if (array_key_exists('photo', $pushMsg)) {                $this->tgLogic->handlePhoto($pushMsg);                return;            }*/            //简单文本事件            if (true) {                $this->tgLogic->handleText($pushMsg);                return;            }        } catch (\Exception $exception) {            \think\Log::error("tg回调处理异常：" . $exception->getMessage());        }    }    /**     * 订单成功转发tg商户群组消息 （此方法加入定时任务）     * @throws \think\db\exception\DataNotFoundException     * @throws \think\db\exception\ModelNotFoundException     * @throws \think\exception\DbException     */    public function tgForwardingOrderSuccess()    {        $ret = $this->modelTgQueryOrderRecords->alias('a')            ->join('orders o', 'o.trade_no = a.order_no')            ->where(['a.success' => 0, 'o.status' => 2, 'a.create_time' => ['>', strtotime("-1 day")]])            ->field('a.order_no')            ->select();        print_r('$ret : ' . json_encode($ret) . PHP_EOL);        foreach ($ret as $OrderRecords) {            print_r('$OrderRecords :' . $OrderRecords['order_no'] . PHP_EOL);            $this->modelTgQueryOrderRecords->tgForwardingOrderSuccess($OrderRecords['order_no']);        }        return;    }    /**     * 定时任务，群发商户群tg消息     */    public function groupSendMessage()    {        $sendMessage = Cache::get('send_message');        $sendMessageContentStr = Cache::get('send_message_content');        if ($sendMessage > 0 && $sendMessageContentStr) {            $number = 100;            $map['tg_group_id'] = ['neq', ''];            $tg_group_ids = $this->modelUser->where($map)->limit((($sendMessage - 1) * $number), $sendMessage * $number)->column('tg_group_id');            $count = $this->modelUser->where($map)->count();            if ($count > $number * $sendMessage) {                Cache::inc('send_message');            } else {                Cache::set('send_message', 0);            }            $tgLogic = new TgLogic();            foreach ($tg_group_ids as $tg_group_id) {                $sendMessageContentArr = json_decode($sendMessageContentStr, true);                if ($sendMessageContentArr['img']) {                    $serverImg = request()->domain() . $sendMessageContentArr['img'];                    $option = $sendMessageContentArr['content'] ? ['caption' => $sendMessageContentArr['content']] : [];                    $tgLogic->sendPhoto($tg_group_id, $serverImg, $option);                } else {                    $tgLogic->sendMessageTogroup($sendMessageContentArr['content'], $tg_group_id);                }            }        }        echo 'success';    }    public function batchSetUserProfit(){        $arr1 = range(100211, 100233);        array_push($arr1, 100240, 100242);//        halt($arr1);        $users = $this->modelUser->select();//        halt( collection($users)->toArray());        $profitArr = [];        foreach ($users as $user){            if ( in_array($user['uid'], $arr1)){                $profitArr[] = [                    'uid' => $user['uid'],                    'service_rate' => 0.008,                    'service_charge' => 0,                    'create_time' => time(),                    'update_time' => time()                ];            }        }                $this->modelUserDaifuprofit->insertAll($profitArr);        echo 'SUCCESS';    }}